from flask import Flask, request, jsonify
from flask_cors import CORS
import os
from werkzeug.utils import secure_filename
import uuid
from services.ai.model_service import model_service
from PIL import Image
import io
import logging

# Configure logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# Very simple in-memory auth (just for testing)
USERS = {
    "admin@example.com": {
        "id": "1",
        "password": "admin123",  # In a real app, this would be hashed
        "first_name": "Admin",
        "last_name": "User",
        "role": "admin"
    }
}

# Simple auth endpoint
@app.route('/api/auth/login', methods=['POST'])
def login():
    data = request.get_json()
    email = data.get('email', '')
    password = data.get('password', '')
    
    user = USERS.get(email)
    
    if not user or user['password'] != password:
        return jsonify({"error": "Invalid email or password"}), 401
    
    # Generate a simple token (not secure, just for testing)
    token = str(uuid.uuid4())
    
    return jsonify({
        "access_token": token,
        "user": {
            "id": user["id"],
            "email": email,
            "first_name": user["first_name"],
            "last_name": user["last_name"],
            "role": user["role"]
        }
    }), 200

# In your User model or simple_app.py
class User:
    def __init__(self, id, email, password_hash, first_name, last_name, role):
        self.id = id
        self.email = email
        self.password_hash = password_hash
        self.first_name = first_name
        self.last_name = last_name
        self.role = role

# Simple in-memory user store for demonstration
users = {
    "admin@example.com": User(
        id="1", 
        email="admin@example.com",
        password_hash="$2b$12$BPgM8D2tRO2Wl4KUZiIJ8eA029M4TP/zQrPJmK3neBd8nww3PMXnO",  # "admin123"
        first_name="Admin",
        last_name="User",
        role="admin"
    )
}

# Configure upload folder
UPLOAD_FOLDER = 'uploads'
os.makedirs(UPLOAD_FOLDER, exist_ok=True)

@app.route('/api/status', methods=['GET'])
def status():
    return jsonify({
        'status': 'online',
        'message': 'OphthalmoScan-AI API is running'
    })

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint to verify the API is running."""
    return jsonify({
        'status': 'healthy',
        'modelLoaded': model_service.model is not None,
        'modelType': str(type(model_service.model).__name__) if model_service.model else 'None'
    })

@app.route('/api/analysis/analyze', methods=['POST'])
def analyze_image():
    if 'image' not in request.files:
        return jsonify({'error': 'No image provided'}), 400
    
    file = request.files['image']
    if file.filename == '':
        return jsonify({'error': 'No image selected'}), 400
    
    try:
        # Read the image data
        img_data = file.read()
        
        # Save the image with a unique filename
        original_filename = secure_filename(file.filename)
        unique_filename = f"{uuid.uuid4()}_{original_filename}"
        file_path = os.path.join(UPLOAD_FOLDER, unique_filename)
        
        with open(file_path, 'wb') as f:
            f.write(img_data)
        
        # Open the saved image with PIL
        logger.info(f"Opening image from path: {file_path}")
        img = Image.open(file_path)
        
        # Analyze the image using the PIL Image object
        logger.info("Calling model_service.analyze_image")
        analysis_results = model_service.analyze_image(img)
        logger.info(f"Analysis results: {analysis_results}")
        
        # Return results in JSON format
        return jsonify({
            'id': str(uuid.uuid4()),
            'filename': unique_filename,
            'file_path': file_path,
            'results': analysis_results,
            'timestamp': '2025-04-25T10:30:00'
        }), 200
    
    except Exception as e:
        logger.error(f"Error in analyze_image: {str(e)}")
        import traceback
        logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

@app.route('/api/model/weights', methods=['GET'])
def get_available_weights():
    """Get list of available model weights."""
    try:
        weights = model_service.get_available_weights()
        return jsonify({
            'weights': weights,
            'current': 'final'  # Default weights
        })
    except Exception as e:
        logger.error(f"Error getting available weights: {str(e)}")
        return jsonify({'error': str(e)}), 500

@app.route('/api/model/weights', methods=['POST'])
def switch_weights():
    """Switch to different model weights."""
    try:
        data = request.get_json()
        if not data or 'version' not in data:
            return jsonify({'error': 'No weight version specified'}), 400
            
        version = data['version']
        # Create new model service instance with specified weights
        global model_service
        from services.ai.model_service import RetinalAnalysisService
        model_service = RetinalAnalysisService(weights_version=version)
        
        return jsonify({
            'message': f'Successfully switched to {version} weights',
            'current': version
        })
    except Exception as e:
        logger.error(f"Error switching weights: {str(e)}")
        return jsonify({'error': str(e)}), 500

if __name__ == '__main__':
    app.run(debug=True)
