import { NextResponse } from 'next/server';
import { auth } from '@clerk/nextjs';
import { createClient } from '@supabase/supabase-js';

// Create a Supabase client with the service role key
const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SERVICE_KEY!,
  {
    auth: {
      persistSession: false,
      autoRefreshToken: false,
    }
  }
);

export async function POST(request: Request) {
  try {
    const { userId } = auth();
    
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }
    
    const data = await request.json();
    console.log('Received data:', data);
    console.log('Clerk userId:', userId);
    
    // Use raw SQL to insert the record and bypass any constraints
    const sqlQuery = `
      INSERT INTO scan_requests (
        description, 
        symptoms, 
        clerk_user_id, 
        status, 
        priority
      ) VALUES (
        '${data.description?.replace(/'/g, "''")}', 
        ${data.symptoms ? `'${data.symptoms?.replace(/'/g, "''")}'` : 'NULL'}, 
        '${userId.replace(/'/g, "''")}', 
        'pending', 
        '${(data.priority || 'medium').replace(/'/g, "''")}'
      )
      RETURNING id, description, symptoms, clerk_user_id, status, priority;
    `;
    
    const { data: result, error } = await supabase.rpc('execute_sql', { 
      sql_query: sqlQuery 
    });
    
    if (error) {
      console.error('Error details:', error);
      return NextResponse.json({ 
        message: 'Failed to create scan request',
        error
      }, { status: 500 });
    }
    
    console.log('SQL execution result:', result);
    
    return NextResponse.json(result || {
      description: data.description,
      symptoms: data.symptoms,
      clerk_user_id: userId,
      status: 'pending',
      priority: data.priority || 'medium'
    }, { status: 201 });
  } catch (error) {
    console.error('Exception:', error);
    return NextResponse.json({ 
      message: 'Internal Server Error',
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}

export async function GET(request: Request) {
  try {
    const { userId } = auth();
    
    if (!userId) {
      return new NextResponse('Unauthorized', { status: 401 });
    }
    
    const { data, error } = await supabase
      .from('scan_requests')
      .select('*')
      .eq('clerk_user_id', userId)
      .order('created_at', { ascending: false });
    
    if (error) {
      console.error('Error fetching scan requests:', error);
      return NextResponse.json({ message: 'Failed to fetch scan requests', error }, { status: 500 });
    }
    
    return NextResponse.json(data);
  } catch (error) {
    console.error('Exception:', error);
    return NextResponse.json({ 
      message: 'Internal Server Error',
      error: error instanceof Error ? error.message : String(error)
    }, { status: 500 });
  }
}
